# -*- generated by 1.0.9 -*-
import da
_config_object = {}
import config
import os
olympuss = da.import_da('Olympus')
client = da.import_da('Client')
replica = da.import_da('Replica')
clients = []
replicas = []
olympus = None

def setup_main():
    config.main()

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        setup_main()
        totalReplica = config.readProperty('num_replica')
        totalClients = config.readProperty('num_client')
        replicaHosts = config.readProperty('replica_hosts')
        clientHosts = config.readProperty('client_hosts')
        operationList = config.readProperty('workload[1]')
        replicaBaseName = 'replica_'
        clientBaseName = 'client_'
        for i in range(0, totalClients):
            nodeName = (clientBaseName + str(i))
            clListTemp = list(self.new(client.Client, num=1, at=nodeName))
            clients.append(clListTemp[0])
        for i in range(0, totalReplica):
            nodeName = (replicaBaseName + str(i))
            reListTemp = list(self.new(replica.Replica, num=1, at=nodeName))
            replicas.append(reListTemp[0])
        olympus = self.new(olympuss.Olympus, num=1, at='onode')
        print('clients => ', clients)
        print('replicas => ', replicas)
        print('olympus => ', olympus)
        for (rnum, rep) in enumerate(replicas):
            replicaName = (replicaBaseName + str(rnum))
            print('replicaName is : ', replicaName)
            if (rnum == 0):
                prevReplica = None
                nextReplica = replicas[(rnum + 1)]
            elif (rnum == (totalReplica - 1)):
                prevReplica = replicas[(rnum - 1)]
                nextReplica = None
            else:
                nextReplica = replicas[(rnum + 1)]
                prevReplica = replicas[(rnum - 1)]
            print('*********replicaName : ', replicaName, ' prevReplica : ', prevReplica, ', nextReplica : ', nextReplica)
            self._setup(rep, [clients[0], olympus, replicaName, prevReplica, nextReplica])
        for cli in clients:
            self._setup(cli, [operationList, olympus, replicas])
        self._setup(olympus, [clients, replicas])
        self._start(clients)
        self._start(olympus)
        for rep in replicas:
            self._start(rep)
