*******************************************************************

CASE : NewRequest

To trigger a New Request for a sequence of Operations
Description:
	t failure=1
	client=2
	replica=3
configuration_file_name
	system.config 
Commands:
	1.) python3 -m da -n main RunSystem.da -i system.config 
				-i parameter helps to define the particular config file. It contains properties specific to retransmission, like
				sleep time at replica, retransmission counter, client timeout specific to retransmission, which will trigger retransmission.
	2.) python3 -m da -n client_0 RunSystem.da 
	3.) python3 -m da -n client_1 RunSystem.da 
	4.) python3 -m da -n replica_0 RunSystem.da 
	5.) python3 -m da -n replica_1 RunSystem.da 
	6.) python3 -m da -n replica_2 RunSystem.da 
log_file_name
	run_system.log
outcome
	pass

*******************************************************************

CASE : Retransmission

To trigger a New Request for a sequence of Operations
Description:
	t failure=1
	client=2
	replica=3
configuration_file_name
	retrans_system.config 
Commands:
	1.) python3 -m da -n main RunSystem.da -i retrans_system.config 
				-i parameter helps to define the particular config file. It contains properties specific to retransmission, like
				sleep time at replica, retransmission counter, client timeout specific to retransmission, which will trigger retransmission.
	2.) python3 -m da -n client_0 RunSystem.da 
	3.) python3 -m da -n client_1 RunSystem.da 
	4.) python3 -m da -n replica_0 RunSystem.da 
	5.) python3 -m da -n replica_1 RunSystem.da 
	6.) python3 -m da -n replica_2 RunSystem.da 
log_file_name
	run_system.log
outcome
	pass

*******************************************************************


CASE : Failure when Replica(HEAD) 0 changes the operation for next message
failures[0,0] = client_request(0,1),change_operation();shuttle(0,5),change_operation()

To trigger a New Request for a sequence of Operations
Description:
	t failure=1
	client=1
	replica=3
configuration_file_name
	retrans_system.config 
Commands:
	1.) python3 -m da -n main RunSystem.da -i retrans_system.config 
				-i parameter helps to define the particular config file. It contains properties specific to retransmission, like
				sleep time at replica, retransmission counter, client timeout specific to retransmission, which will trigger retransmission.
	2.) python3 -m da -n client_0 RunSystem.da 
	4.) python3 -m da -n replica_0 RunSystem.da 
	5.) python3 -m da -n replica_1 RunSystem.da 
	6.) python3 -m da -n replica_2 RunSystem.da 
log_file_name
	run_system.log
outcome
	pass

*******************************************************************


CASE : failures[0,1] = shuttle(0,2),drop_result_stmt()

Failure when 2nd Replica drops the head replicas resultstatement from result_proof

Description:
	t failure=1
	client=1
	replica=3
configuration_file_name
	"5.nonHead.SH.DRS.config"
Commands(When all commands are executed from sourcefolder):
	1.) python3 -m da -n main RunSystem.da -i ../config/5.nonHead.SH.DRS.config 
				-i parameter helps to define the particular config file. It contains properties specific to retransmission, like
				sleep time at replica, retransmission counter, client timeout specific to retransmission, which will trigger retransmission.
	2.) python3 -m da -n client_0 RunSystem.da 
	3.) python3 -m da -n replica_0 RunSystem.da 
	4.) python3 -m da -n replica_1 RunSystem.da 
	5.) python3 -m da -n replica_2 RunSystem.da 
log_file_name
	run_system.log
outcome scenario
	fail
explaination:
	when 2nd replica drops the head replica orderstatement from resultproof and forward the shuttle to next replica(tail in our case). Tail replica
		1. forward the response to client
		2. cache the wrong result proof shuttle
		3. forward the shuttle to previous replica
	In 1st case, since the resultproof is invalid, validation fails at client, client does retransmission in this case and forward the
	request to all replicas. Since the tail replica have a wrong resultproof cached, it forwards the request to client. All other replicas
	does not find anything in their cache and forward the request to head replica. Since the client gets the wrong resultproof and cannot retransmit,
	retransmission operation timesout.



*******************************************************************


CASE : failures[0,2] = shuttle(0,2),change_result()

Failure when 2nd Replica drops the head replicas resultstatement from result_proof

Description:
	t failure=1
	client=1
	replica=3
configuration_file_name
	"5.nonHead.SH.DRS.config"
Commands(When all commands are executed from sourcefolder):
	1.) python3 -m da -n main RunSystem.da -i ../config/5.nonHead.SH.DRS.config 
				-i parameter helps to define the particular config file. It contains properties specific to retransmission, like
				sleep time at replica, retransmission counter, client timeout specific to retransmission, which will trigger retransmission.
	2.) python3 -m da -n client_0 RunSystem.da 
	3.) python3 -m da -n replica_0 RunSystem.da 
	4.) python3 -m da -n replica_1 RunSystem.da 
	5.) python3 -m da -n replica_2 RunSystem.da 
log_file_name
	run_system.log
outcome scenario
	fail
explaination:

