# -*- generated by 1.0.9 -*-
import da
PatternExpr_199 = da.pat.TuplePattern([da.pat.ConstantPattern('SET_UP')])
PatternExpr_204 = da.pat.BoundPattern('_BoundPattern208_')
PatternExpr_238 = da.pat.TuplePattern([da.pat.ConstantPattern('SHUTTLE')])
PatternExpr_243 = da.pat.BoundPattern('_BoundPattern252_')
PatternExpr_209 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern215_')]), da.pat.TuplePattern([da.pat.ConstantPattern('SET_UP')])])
PatternExpr_253 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern259_')]), da.pat.TuplePattern([da.pat.ConstantPattern('SHUTTLE')])])
_config_object = {}

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._ClientReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_199, sources=[PatternExpr_204], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_238, sources=[PatternExpr_243], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, reqList, olympus, replicas, **rest_270):
        super().setup(reqList=reqList, olympus=olympus, replicas=replicas, **rest_270)
        self._state.reqList = reqList
        self._state.olympus = olympus
        self._state.replicas = replicas
        self.output('**********Setting up Client *************')
        self._state.reqList = self._state.reqList
        self._state.olympus = self._state.olympus
        self._state.replicas = self._state.replicas

    def run(self):
        self.output('*********RUN : Starting Client***********')
        self.send(('SET_UP',), to=self._state.olympus)
        PatternExpr_209.match_iter(self._ClientReceivedEvent_0, _BoundPattern215_=self._state.olympus, SELF_ID=self._id)
        self.output('*********received SET_UP FROM Client***********')
        flag = 'FORWARD'
        self.send(('PERFORM_OPERATION',), to=self._state.replicas[0])
        super()._label('_st_label_235', block=False)
        _st_label_235 = 0
        while (_st_label_235 == 0):
            _st_label_235 += 1
            if PatternExpr_253.match_iter(self._ClientReceivedEvent_1, _BoundPattern259_=self._state.replicas[(len(self._state.replicas) - 1)], SELF_ID=self._id):
                _st_label_235 += 1
            else:
                super()._label('_st_label_235', block=True)
                _st_label_235 -= 1
        self.output('*********SHUTTLE Reached***********')

    def main(self):
        pass
