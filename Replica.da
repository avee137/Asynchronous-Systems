import config
import json
import nacl.utils
import nacl.signing
from nacl.public import PrivateKey, Box
import logging as logger
import sys

class Replica(process):
	
	def setup(clients,olympus,currentReplica,prevReplica,nextReplica,headReplica,tailReplica,replica_state,currentReplicaSigningKey,allReplicaVerifyKeysMap):
		config.main()
		logger.basicConfig(
		format="%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s",
		handlers=[
		logger.FileHandler("{0}/{1}.log".format(config.readProperty("logfile_path"), config.readProperty("logfile_name"))),
		logger.StreamHandler()
		],
		level=logger.INFO)

		logger.info("Replica SETUP. currentReplica : "+str(currentReplica)+", clients : "+str(clients)+", olympus : "+str(olympus)+", replica_state : "+str(replica_state))

	    # logger.info("*	***********Setting Up replica***********")
		self.clients=clients
		self.olympus = olympus
		self.currentReplica=currentReplica
		self.prevReplica=prevReplica
		self.nextReplica=nextReplica
		self.currentReplicaSigningKey = currentReplicaSigningKey
		self.allReplicaVerifyKeysMap = allReplicaVerifyKeysMap
		self.headReplica=headReplica
		self.tailReplica=tailReplica
		self.replica_state=replica_state
		#Main Dict object
		self.dictionary_data={}#{'jedi':'luke skywalker','actor':'irfan','criket':'sachin','chupa':'aditya'}
		#Result (key=requestId, value = (order_proof,result_proof)	
		self.result_cache={}

		#REMOVING THIS
		# self.operation_result={}

		self.operation_result_internal={}
		self.order_proof=[]
		self.result_proof=[]
		#Object to store requestId to (Slot,Operation) pair
		self.requestIdToSoPair = {}

		if(prevReplica == None):
			self.slot_number = 0

		logger.debug("REPLICA SETUP DONE!!")
		
	def main(): pass	

	def updateSlotOperation(request_id,slot,operation):	
		tempSOPair = []
		tempSOPair.append(slot)
		tempSOPair.append(operation)
		self.requestIdToSoPair[request_id] = tuple(tempSOPair)

	#CONTROL FLOW: From (Client to HeadReplica)
	def receive(msg=('PERFORM_OPERATION', request_id,operation,client), from_=self.clients):
		logger.info("PERFORM_OPERATION Called from client : "+str(client)+", request_id: "+str(request_id)+", operation: "+str(operation)+" at replica : "+str(self.currentReplica))

		shuttle=None
		self.slot_number+=1
		# self.operation_result[request_id] = self.executeOperation(request_id, operation)
		updateSlotOperation(request_id,self.slot_number,operation)
		self.operation_result_internal[request_id] = self.executeOperation(request_id, operation)
		logger.debug("After execute Operation, result proof: "+ str(self.order_proof))
		tupl = self.getResult_Order_Proof(request_id,operation,self.slot_number)
		shuttle = self.updateShuttle(shuttle,tupl)
		logger.debug("shuttle after update: "+str(shuttle))
		self.updateOrder_Result_Proof(shuttle)
		logger.debug("ResultProof: "+str(self.result_proof)+"\n"+"OrderProof: "+str(self.order_proof));
		logger.info("PERFORM_OPERATION done at HeadReplica, transfering SHUTTLE to nextReplica : "+str(self.nextReplica))
		send(('FORWARD_SHUTTLE', request_id,shuttle,operation,self.slot_number,client), to=self.nextReplica)

	 #CONTROL FLOW: From (one Replica to another)
	def receive(msg=('FORWARD_SHUTTLE',request_id,shuttle,operation,slot,client), from_=self.prevReplica):
		logger.info("PERFORM_OPERATION SHUTTLE FORWARD. at "+str(self.currentReplica)+", from prevReplica : "+str(self.prevReplica)+", request_id: "+str(request_id)+", slot : "+str(slot)+", operation : "+str(operation))
		logger.debug("SHUTTLE : "+str(shuttle));
		if(validateOrderProof(shuttle,operation,slot)):
			# self.operation_result[request_id] = self.executeOperation(request_id, operation)
			self.operation_result_internal[request_id] = self.executeOperation(request_id, operation)
			updateSlotOperation(request_id,slot,operation)
			slot_number = slot
			tupl = self.getResult_Order_Proof(request_id,operation,slot_number)
			shuttle = self.updateShuttle(shuttle,tupl)
			logger.debug("shuttle after update: "+str(shuttle))
			self.updateOrder_Result_Proof(shuttle)

			#validation successful now sending the shuttle forward
			if(self.nextReplica == None):
				
				orderproof,resultproof = shuttle
				logger.info("justfortest"+str(len(resultproof)))
				self.cacheResult(request_id, resultproof)
				#SENDING result to client
				logger.info('SHUTTLE reached at Tail : '+str(self.currentReplica)+", sending result to client : "+str(client))
				send(('RESULT_FROM_TAIL', resultproof ,), to=client)
				#Starting REVERSE_SHUTTLE
				logger.info('REVERSE_SHUTTLE starting. Forwarding to prevReplica : '+str(self.prevReplica))
				send(('REVERSE_SHUTTLE', request_id, resultproof,), to=self.prevReplica)
			else:
				send(('FORWARD_SHUTTLE',request_id,shuttle,operation,slot,client), to=self.nextReplica)
		else:
			# NOTE: replica turns itself immutable and sends wedge statement to client with proof od misbehaviour
			logger.error("************************Validating order proof failed at one of the replicas********************")

	 #message to replca from previous 
	def receive(msg=('REVERSE_SHUTTLE',request_id,result_proof,), from_=self.nextReplica):
		logger.info("REVERSE_SHUTTLE received at replica : "+str(self.currentReplica)+", from nextReplica : "+str(self.nextReplica)+", request_id : "+str(request_id))
		
		validation,result = config.validateResultProof(result_proof, self.allReplicaVerifyKeysMap)
		logger.info("the result from validation is " + str(validation))
		if(validation):
			self.cacheResult(request_id, result)
			if(self.prevReplica == None):
				logger.info("SHUTTLE reached at HEAD")
			else:
				logger.info("After caching result, forwarding to prevReplica : "+str(self.prevReplica))
				send(('REVERSE_SHUTTLE',request_id,result_proof,), to=self.prevReplica)
		else:
			logger.error("the validation failed at" + str(self.currentReplica))
			logger.error("************************Validating order proof failed at one of the replicas********************")



	#FROM NON-HEAD Replicas to HEAD Replica for Retransmission case
	def receive(msg=('RETRANSMISSION_HEAD',requestId,operation,fromReplica,client),):
		logger.info("RETRANSMISSION_HEAD request received at HEAD replica : "+str(self.currentReplica)+" from replica : "+str(fromReplica))
		timeout = config.readProperty("head_timeout")
		#NOTE: change it to  : if(requestId in self.result_cache):	
		if(requestId in self.result_cache):	
			logger.info("RequestId found inside the cache. Returning response to client : "+client+", requestId : "+str(requestId))
			send(("RETRANSMISSION",self.result_cache[requestId],self.currentReplica), to=client)
			return;
		#HEAD has already started operation for the first request sent by other 
		#replicas(including head) in case it does not recognize the operation
		if((requestId in self.requestIdToSoPair) and (requestId not in self.result_cache)):
			logger.info("Result shuttle is yet to receive at the head, waiting for it!! fromReplica : "+str(fromReplica))
			if await(some(received(('REVERSE_SHUTTLE',requestId,result_proof,),from_=self.nextReplica),has= (requestId in self.result_cache))):
				logger.info("REACHED HEAD FROM SHUTTLE & RETRANSMISSION COMPLETE")
			elif(timeout(timeout)):
				logger.info("TIMEOUT at Replica : "+str(self.currentReplica)+" sending RECONFIGURATION request to Olympus!!!!")		
		else:
			#PERFORM Operation for FORWARD_SHUTTLE only once and stop for all other Replicas
			logger.info("Operation is not recognized at HeadReplica. requestId : "+str(requestId)+", operation : "+str(operation))
			send(("PERFORM_OPERATION",requestId,operation), to=self.headReplica)
			if(timeout(timeout)):
				logger.info("TIMEOUT at Replica : "+str(self.currentReplica)+" sending RECONFIGURATION request to Olympus!!!!")		
			

	#FROM Clients To Replicas
	def receive(msg=('RETRANSMISSION',requestId,operation,client,), from_=self.clients):
		logger.info("RETRANSMISSION received at "+str(self.currentReplica)+", requestId : "+str(requestId)+", operation : "+str(operation)+ ", from client : "+str(client))
		
		if(self.replica_state == 'IMMUTABLE'):
			# if("replica_2" in self.currentReplica):
			logger.info("Replica is in IMMUTABLE state. Returning ERROR to clients")
			send(("RETRANSMISSION","ERROR",self.currentReplica), to=client)
		#TEMPORARILY MADE NOT HERE, TO ALLOW NEXT CASE. REVERT IT TO : elif(requestId in self.result_cache):	
		elif(requestId in self.result_cache):	
			logger.info("RequestId found in replica cache. Returning to client : "+str(client))
			#TODO NOTE Handle Shuttle 
			send(("RETRANSMISSION",self.result_cache[requestId],self.currentReplica), to=client)

		else:#(self.currentReplica != self.headReplica):
			#send request to head
			#self.headReplica
			logger.info("RETRANSMISSION_HEAD to HEAD REPLICA")
			send(("RETRANSMISSION_HEAD",requestId,operation,self.currentReplica),to=self.headReplica)
			
			timeout=config.readProperty("nonhead_timeout")
			#check if the current replica is a tailReplica, if yes, it will get result shuttle from prevReplica else
			#all other shuttle will receive results from nextReplica
			logger.info("self.currentReplica : "+str(self.currentReplica)+", self.tailReplica : "+str(self.tailReplica))
			slot=int()
			shuttle=[]
			# if ((self.currentReplica==self.tailReplica) and await(some(received(('SHUTTLE','FORWARD',request_id,shuttle,operation,slot),from_=self.prevReplica)))) or await(some(received(('SHUTTLE','REVERSE',requestId,result_proof,),from_=self.nextReplica),has=requestId in self.result_cache)):
			
			if (self.currentReplica==self.tailReplica):
				if(await(some(received(('FORWARD_SHUTTLE',request_id,shuttle,operation,slot),from_=self.prevReplica)))):
					logger.info("in retransmission unrecognised request. Shuttle reached to tail node : "+str(result_proof)+", sending to client : "+str(client))
					send(('RETRANSMISSION', self.result_cache[requestId] ,self.currentReplica), to=client)
				elif(timeout(timeout)):
					logger.info("timer expired at tail replica : "+str(self.currentReplica))
			else:
				if await(some(received(('REVERSE_SHUTTLE',requestId,result_proof,),from_=self.nextReplica),has=requestId in self.result_cache)):
					logger.info("shuttle coming from next replica result_proof : "+str(result_proof)+", sending to client : "+str(client))
					send(('RETRANSMISSION', self.result_cache[requestId] ,self.currentReplica), to=client)
				elif(timeout(timeout)):
					logger.info("timer expired at non head replica : "+str(self.currentReplica))
					#TODO RECONFIGURATION
		
		#(msg,requestId,operation,replicaId):

	def run():
		await(received('',))

	def executeOperation(request_id,operation):
		logger.info("Executing Operation in dictonary. operation : "+str(operation))
		temp=operation.split('(')
		
		if(temp[0]=="put"):
			tempsplit=operation.split('\'')
			dictionary_data[tempsplit[1]]=tempsplit[3]
			return 'ok'

		elif(temp[0] == "append"):
			tempsplit=operation.split('\'')
			if(self.dictionary_data[tempsplit[1]]):	
				self.dictionary_data[tempsplit[1]] = self.dictionary_data[tempsplit[1]] + ' ' + tempsplit[3]
				logger.debug('append is executeed@@@@@@@@')
				return 'ok'
			else:
				return 'fail'

		elif(temp[0] == "get"):
			tempsplit=operation.split('\'')
			if(self.dictionary_data[tempsplit[1]]):
				value = self.dictionary_data[tempsplit[1]];
				logger.debug('get is executeed@@@@@@@@')	
			else:
				return 'fail'

		elif(temp[0] == "slice"):
			tempsplit=operation.split('\'')
			if(dictionary_data[tempsplit[1]]):
				if (len(dictionary_data[tempsplit[1]])) > int(temp[3]):
					dictionary_data[tempsplit[1]].slice[:int(temp[3])]
					return 'ok'
				else:
					return 'fail'
			else:
				return 'fail'


	def cacheResult(request_id, resultproof):
		logger.info("cacheResult  request_id : "+str(request_id))
		self.result_cache[request_id] = resultproof

	def validateOrderProof(shuttle,operation,slot):
		logger.info("validateOrderProof. slot : %s, operation : %s"%(slot,operation))
		orderproof,resultproof = shuttle
		for i in range(0,len(orderproof)):
			try:
				# Create a VerifyKey object from a hex serialized public key
				verify_key = nacl.signing.VerifyKey(self.allReplicaVerifyKeysMap[i], encoder=nacl.encoding.HexEncoder)
				order,result = shuttle
				logger.debug("order number"+str(i+1)+ "from shttle : "+ str(order[i]))
				message = order[i]
				# Check the validity of a message's signature
				# Will raise nacl.exceptions.BadSignatureError if the signature check fails
				verify_key.verify(message)
				logger.debug("verified")
			except nacl.exceptions.BadSignatureError:
				logger.error("key mismatch failed for ", orderproof[i])
				return False
		logger.info("validateOrderProof. SUCCESSFULL!! ")
		return True

	# def validateResultProof(resultproof):
	# 	for i in range(0,len(resultproof)):
	# 		length = len(resultproof)
	# 		try:
	# 			logger.debug("12345678908765432123456789876543234567987654323456789876543234567890987654", resultproof)
	# 			# Create a VerifyKey object from a hex serialized public key
	# 			verify_key = nacl.signing.VerifyKey(self.allReplicaVerifyKeysMap[1], encoder=nacl.encoding.HexEncoder)
	# 			logger.debug("result number",i+1, "from result proof", resultproof[length-i-1])
	# 			message = resultproof[length-i-1]
	# 			# Check the validity of a message's signature
	# 			# Will raise nacl.exceptions.BadSignatureError if the signature check fails
	# 			result = verify_key.verify(message)

	# 			logger.debug("verified")
	# 			actualResult = result.decode("utf-8")
	# 		except nacl.exceptions.BadSignatureError:
	# 			logger.error("key mismatch failed for ", resultproof[length-i-1])
	# 			return (False,None)
	# 	logger.info("validateResultProof. SUCCESSFULL!! ")
	# 	return (True,actualResult)

	def updateShuttle(shuttle,tupl):
		logger.debug("updateShuttle at Replica : "+str(self.currentReplica))
		order=[]
		result=[]
		orderproof, resultproof=tupl

		# self.order_proof.append((slot_number,operation))
		# self.result_proof.append((self.operation_result_internal[request_id],operation,'encrypted'))

		if(shuttle==None):
			order.append(orderproof)
			result.append(resultproof)
			shuttle=(order,result)
		else:
			shuttle[0].append(orderproof)
			shuttle[1].append(resultproof)

		return shuttle

	def signMessage(msg):
		signedMsg = currentReplicaSigningKey.sign(str.encode(msg))
		logger.debug("orignal message : "+str(msg)+", signedMsg : "+str(signedMsg))
		return signedMsg

	def getResult_Order_Proof(request_id,operation,slot_number):
		logger.debug("inside getResult_Order_Proof function for creating the current tuple")
		order = (slot_number,operation)
		signedOrderProof= signMessage(str(order))
		encryptedHash = config.calculateHash(self.operation_result_internal[request_id])
		result = (self.operation_result_internal[request_id],operation,'encrypted')
		signedResultProof = signMessage(str(result))
		tupl = (signedOrderProof,signedResultProof)
		# tupl = (str(order),str(result))
		return tupl

	def updateOrder_Result_Proof(shuttle):
		logger.info("updating OrderProof and ResultProof !!")
		if(shuttle==None):
			logger.info('Updating HEAD Replica')
		else:
			oProof, rProof = shuttle
			for i in oProof:
				self.order_proof.append(i)
			for j in rProof:
				self.result_proof.append(j)





