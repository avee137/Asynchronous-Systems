# -*- generated by 1.0.9 -*-
import da
PatternExpr_191 = da.pat.TuplePattern([da.pat.ConstantPattern('Ping')])
PatternExpr_196 = da.pat.FreePattern('clients')
PatternExpr_287 = da.pat.TuplePattern([da.pat.ConstantPattern('replicas')])
PatternExpr_292 = da.pat.FreePattern('clients')
PatternExpr_309 = da.pat.TuplePattern([da.pat.ConstantPattern('Ping_replica')])
PatternExpr_314 = da.pat.BoundPattern('_BoundPattern318_')
PatternExpr_336 = da.pat.TuplePattern([da.pat.ConstantPattern('replicas')])
PatternExpr_341 = da.pat.FreePattern('clients')
PatternExpr_360 = da.pat.TuplePattern([da.pat.ConstantPattern('Ping_replica')])
PatternExpr_365 = da.pat.BoundPattern('_BoundPattern369_')
PatternExpr_447 = da.pat.TuplePattern([da.pat.ConstantPattern('Pong')])
PatternExpr_452 = da.pat.FreePattern('olympus')
_config_object = {}
import configparser

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_191, sources=[PatternExpr_196], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, clientList, replicaList, **rest_793):
        super().setup(clientList=clientList, replicaList=replicaList, **rest_793)
        self._state.clientList = clientList
        self._state.replicaList = replicaList
        self._state.clientList = self._state.clientList
        self._state.replicaList = self._state.replicaList
        print('olympusId:', str(self._id))

    def run(self):
        self.output('before pinged')
        super()._label('_st_label_188', block=False)
        clients = None

        def ExistentialOpExpr_189():
            nonlocal clients
            for (_, (_, _, clients), (_ConstantPattern207_,)) in self._OlympusReceivedEvent_0:
                if (_ConstantPattern207_ == 'Ping'):
                    if True:
                        return True
            return False
        _st_label_188 = 0
        while (_st_label_188 == 0):
            _st_label_188 += 1
            if ExistentialOpExpr_189():
                _st_label_188 += 1
            else:
                super()._label('_st_label_188', block=True)
                _st_label_188 -= 1
        self.output('Pinged.')
        self.send(('Pong',), to=clients)

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_1 = []
        self._ReplicaReceivedEvent_2 = []
        self._ReplicaReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_287, sources=[PatternExpr_292], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_309, sources=[PatternExpr_314], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_336, sources=[PatternExpr_341], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_360, sources=[PatternExpr_365], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, role, prev, next, olympus, **rest_793):
        super().setup(role=role, prev=prev, next=next, olympus=olympus, **rest_793)
        self._state.role = role
        self._state.prev = prev
        self._state.next = next
        self._state.olympus = olympus
        self._state.role = self._state.role
        self._state.prev = self._state.prev
        self._state.next = self._state.next
        self._state.olympus = self._state.olympus
        print('replicaid:', str(self._id))

    def run(self):
        self.output(' before Ponged in replica.')
        self.output('self.role : ', self._state.role, ', self.prev : ', self._state.prev, ', self.next : ', self._state.next, ', self.olympus : ', self._state.olympus)
        super()._label('_st_label_283', block=False)
        clients = None

        def ExistentialOpExpr_285():
            nonlocal clients
            for (_, (_, _, clients), (_ConstantPattern303_,)) in self._ReplicaReceivedEvent_0:
                if (_ConstantPattern303_ == 'replicas'):
                    if True:
                        return True
            return False

        def ExistentialOpExpr_307():
            for (_, (_, _, _BoundPattern325_), (_ConstantPattern328_,)) in self._ReplicaReceivedEvent_1:
                if (_BoundPattern325_ == self._state.prev):
                    if (_ConstantPattern328_ == 'Ping_replica'):
                        if True:
                            return True
            return False
        _st_label_283 = 0
        while (_st_label_283 == 0):
            _st_label_283 += 1
            if (ExistentialOpExpr_285() or ExistentialOpExpr_307()):
                _st_label_283 += 1
            else:
                super()._label('_st_label_283', block=True)
                _st_label_283 -= 1
        clients = None

        def ExistentialOpExpr_334():
            nonlocal clients
            for (_, (_, _, clients), (_ConstantPattern351_,)) in self._ReplicaReceivedEvent_2:
                if (_ConstantPattern351_ == 'replicas'):
                    if True:
                        return True
            return False
        if ExistentialOpExpr_334():
            self.output('from client')
        else:

            def ExistentialOpExpr_358():
                for (_, (_, _, _BoundPattern376_), (_ConstantPattern379_,)) in self._ReplicaReceivedEvent_3:
                    if (_BoundPattern376_ == self._state.prev):
                        if (_ConstantPattern379_ == 'Ping_replica'):
                            if True:
                                return True
                return False
            if ExistentialOpExpr_358():
                self.output('Ping_replica from previous replica')
        self.send(('Ping_replica',), to=self._state.next)

    def main(self):
        pass

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_447, sources=[PatternExpr_452], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, head, reqList, olympus, replicas, **rest_793):
        super().setup(head=head, reqList=reqList, olympus=olympus, replicas=replicas, **rest_793)
        self._state.head = head
        self._state.reqList = reqList
        self._state.olympus = olympus
        self._state.replicas = replicas
        self._state.head = self._state.head
        self._state.reqList = self._state.reqList
        self._state.olympus = self._state.olympus
        self._state.replicas = self._state.replicas
        print('clientid:', str(self._id))

    def run(self):
        self.output(' before Ponged.')
        self.send(('Ping',), to=self._state.olympus)
        super()._label('_st_label_444', block=False)
        olympus = None

        def ExistentialOpExpr_445():
            nonlocal olympus
            for (_, (_, _, self._state.olympus), (_ConstantPattern462_,)) in self._ClientReceivedEvent_0:
                if (_ConstantPattern462_ == 'Pong'):
                    if True:
                        return True
            return False
        _st_label_444 = 0
        while (_st_label_444 == 0):
            _st_label_444 += 1
            if ExistentialOpExpr_445():
                _st_label_444 += 1
            else:
                super()._label('_st_label_444', block=True)
                _st_label_444 -= 1
        self.output('Ponged.')
        self.send(('replicas',), to=self._state.replicas)
        self.output('finally done')

    def main(self):
        pass

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        config = configparser.ConfigParser()
        config.read('basic.csv')
        configdict = {}
        sections = config.sections()
        print('sections', sections)
        for i in range(0, len(sections)):
            options = config.options(sections[i])
            for option in options:
                configdict[option] = config.get(sections[i], option)
        print('------------------------', configdict)
        totalReplicaList = []
        totalClientList = []
        print('-----ceating olympus process-------\n')
        olympus = self.new(Olympus, num=1, at='onode')
        print('-----creating server and client list server=3, client=1\n')
        numReplicas = int(configdict['num_replicas'])
        numClients = int(configdict['num_client'])
        for i in range(0, 3):
            replicas = list(self.new(Replica, num=numReplicas, at=('rnode' + str(i))))
        print('12345678909876543456789ioi876543234567898765432')
        (replica0, replica1, replica2) = replicas
        clients = list(self.new(Client, num=numClients))
        totalReplicaList.append(replicas)
        totalClientList.append(clients)
        head = replicas[0]
        tail = replicas[(3 - 1)]
        chainlist = replicas[0:2]
        for (rnum, p) in enumerate(replicas):
            if (rnum == 0):
                self._setup(p, ['head', None, replicas[(rnum + 1)], olympus])
            elif (rnum == (3 - 1)):
                self._setup(p, ['tail', replicas[(rnum - 1)], None, olympus])
            elif (rnum < 2):
                self._setup(p, [('replica' + str(rnum)), replicas[(rnum - 1)], replicas[(rnum + 1)], olympus])
        workloads = config.options('section2')
        for (cnum, p) in enumerate(clients):
            req = []
            requests = configdict[workloads[cnum]]
            req = requests.split(';')
            print('req\n', req)
            self._setup(p, [head, req, olympus, replicas])
        self._setup(olympus, [totalClientList, totalReplicaList])
        self._start(clients)
        self._start(olympus)
        self._start(replica0)
        self._start(replica1)
        self._start(replica2)
