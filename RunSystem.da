import config
import os
import nacl.utils
import nacl.encoding
import nacl.signing
from nacl.public import PrivateKey, Box
import logging as logger
import sys

olympuss = import_da('Olympus')
client = import_da('Client')
replica = import_da('Replica')

clients = set()
replicas = []
olympus = None

def setup_main():

	config.main();	# initialize configuration file
	logger.basicConfig(
	    format="%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s",
	    handlers=[
	        logger.FileHandler("{0}/{1}.log".format(config.readProperty("logfile_path"), config.readProperty("logfile_name"))),
	        logger.StreamHandler()
	    ],
	    level=logger.DEBUG)
	os.remove((config.readProperty("logfile_path")+config.readProperty("logfile_name")+".log"))

def setup_keys(totalReplica,replicas):

	replicaSigningKeys = {}
	replicaVerifyKeys = {}
	for i,rep in enumerate(replicas):
		signing_key = nacl.signing.SigningKey.generate()
		verify_key = signing_key.verify_key
		verify_key_hex = verify_key.encode(encoder=nacl.encoding.HexEncoder)
		replicaSigningKeys[i] = signing_key;
		replicaVerifyKeys[i] = verify_key_hex;
	keys = []
	keys.append(replicaSigningKeys)
	keys.append(replicaVerifyKeys)
	
	return tuple(keys)

def main():
	# Setup function for main class.
	setup_main();
	
	#############creating client############################
	num_replica = config.readProperty("num_replica")
	totalClients = config.readProperty("num_client")
	clientHosts = config.readProperty("client_hosts")
	clientBaseName = "client_"
	clientList=[]
	for i in range(0,totalClients):
		nodeName = clientBaseName+str(i)#+"@"+clientHosts[i];
		clListTemp = new(client.Client,num=1, at=nodeName)
		clientList.extend(clListTemp)
	clients = set(clientList)
	print("clients => ",clients);
	#########################################################


	###########Creating and setting up Olympus###############
	olympus = new(olympuss.Olympus,num=1, at='onode')
	setup(olympus,[clients])
	#########################################################
	
	
	############Creating Replicas in Olympus#################
	##Creating
	
	replica_hosts = config.readProperty("replica_hosts")
	replicaBaseName = "replica_";
	for i in range(0,num_replica):
		nodeName = replicaBaseName+str(i)#+"@"+replicaHosts[i];
		reListTemp = new(replica.Replica,num=1, at=nodeName)
		replicas.extend(reListTemp)
	print("replicas => ",self.replicas,", replica_hosts : ",replica_hosts);
	
	(replicaSigningKeys,replicaVerifyKeys) = setup_keys(num_replica,replicas);
	# print("replicaToPubPrivKey : ",replicaToPubPrivKey, " , replicaToPubKeys : ",replicaToPubKeys)
	##Setting up Replica
	replicaBaseName = "replica_"
	for rnum,rep in enumerate(replicas):
		replicaName = replicaBaseName+str(rnum)
		replica_state = "ACTIVE"
		print("replicaName is : ",replicaName)
		if rnum == 0:
			prevReplica = None
			nextReplica = replicas[rnum+1]
		elif rnum == num_replica-1:
			prevReplica = replicas[rnum-1]
			nextReplica = None
		else:
			nextReplica = replicas[rnum+1]
			prevReplica = replicas[rnum-1]
		print("*********replicaName : ",replicaName," prevReplica : ",prevReplica,", nextReplica : ",nextReplica)#,", pubPrivKeys[rnum] : ",replicaToPubPrivKey[rep],", replicaToPubKeys: ",replicaToPubKeys);
		# setup(rep,[clients[0],olympus,replicaName,prevReplica,nextReplica])
		# print("replica : ",rep,", replicaToPubPrivKey: ",replicaToPubPrivKey[str(rep)])
		# setup(rep,[clients[0],olympus,replicaName,prevReplica,nextReplica,None,None])
		setup(rep,[clients,olympus,rep,prevReplica,nextReplica,replicas[0],replicas[len(replicas)-1],replica_state,replicaSigningKeys[rnum],replicaVerifyKeys])

	##Starting Replica
	for rep in replicas:
		start(rep)
	#########################################################
	


	############Creating Setting up client#################
	operationList = config.readProperty("workload[1]");
	for cli in clients:
		setup(cli,[operationList,olympus,replicas,cli])
		start(cli)
	#########################################################

	start(olympus)
	send(('SET_UP',), to=olympus)


	
	
	
	
  