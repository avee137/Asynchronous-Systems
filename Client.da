import config
import uuid
import logging as logger
import sys
import time

class Client(process):
	
	dictionary_data;

	history;

	order_cache;

	request_sequence

	def setup(reqList,olympus,replicas, currentClient):
		config.main()
		logger.basicConfig(
		format="%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s",
		handlers=[
		logger.FileHandler("{0}/{1}.log".format(config.readProperty("logfile_path"), config.readProperty("logfile_name"))),
		logger.StreamHandler()
		],
		level=logger.DEBUG)
		logger.info("**********Setting up Client *************"+str(config.readProperty("logfile_path"))); 
		self.reqList=reqList
		self.olympus=olympus
		self.replicas=replicas
		self.request_sequence={}

		# logger.info("logging for the first time ")
		# logger.info("************Setting Up Client***********",config.readProperty("logfile_path"))

 
	def main(): pass

	def run():
		logger.debug("*********RUN : Starting Client***********")
		send(('SET_UP',), to=self.olympus)
		received(('SET_UP',), from_=self.olympus)
		logger.debug('Recieved Setup')
		logger.debug("*********received SET_UP FROM Client***********")
		# flag = 'FORWARD'
		# send(('PERFORM_OPERATION',request_id, self.reqList[0]), to=self.replicas[0])
		# # send(('PERFORM_OPERATION',), to=self.replicas[0])
		# await(received(('SHUTTLE',), from_=self.replicas[len(replicas)-1]))
		# output("*********SHUTTLE Reached***********")
		# logger.info("starting operations shuttle")
		self.executeOperations()
		output("\n****************************\n****************************\n****************************")
		# resultproof
		await(received('SHUTTLE',))
		time.sleep(10)
		self.executeRetransmissionTest();
		output("\n****************************\n****************************\n****************************")
		await(received('',))
		


	def receive(msg=('SHUTTLE',result_proof,), from_=self.replicas[len(replicas)-1]): 
		logger.info("******** Result proof:" + str(result_proof) +" received from :"+str(self.replicas[len(replicas)-1]))
		logger.debug("*********SHUTTLE Reached***********")
		# output(result_proof)


	def dictionary():
		dictionary = [('movie','star'),('jedi','luke skywalker'),('actor','irfan'),('criket','sachin'),('chupa','aditya')]
		return dictionary

	def sendOperationToReplicaNode(msg,requestId,operation,replicaId):
		send((msg,requestId, operation,), to=replicaId)	
		output("sendOperationToReplicaNode send at replicaId ",replicaId)

	def executeRetransmissionTest():
		output("executeRetransmissionTest", self.reqList)
		for requestId,operation in self.request_sequence.items():
			output("executeRetransmissionTest requestId : ",requestId, ', operation', operation)
			self.retransmission(requestId,operation)
			break;


	#Receive output for retransmission request from replica.
	def receive(msg=("RETRANSMISSION",message,replicaId,),):
		output("RETRANSMISSION Result received from replica : ",replicaId," message : ",message);

	def retransmission(request_id,operation):
		awaitResultQueue=set()
		resultproof=str()
		for rnum,rep in enumerate(replicas):
			sendOperationToReplicaNode('RETRANSMISSION',request_id,operation,rep)
			awaitResultQueue.add(('SHUTTLE', resultproof ,))
			
        
		time.sleep(10)
		logger.debug("BEFORE: IN CLIENT FINISHED!!")
		await(each(p in awaitResultQueue, has=received(('RETRANSMISSION', resultproof))))
		logger.debug("AFTER: IN CLIENT FINISHED!!")



	def executeOperations():
		logger.info("The Client:%s.    workload to be performed : %s" %(currentClient, self.reqList))
		for operation in self.reqList:
			request_id = uuid.uuid4()
			logger.debug("Some message: %s %s" % ("operation",operation))	
			# logger.info("CLIENTCLIENTCLIENT logging for the first time "+"var"+str(var )+" "+str(dic))
			# output("CLIENTCLIENTCLIENT logging for the first time "+"var"+str(var )+" "+str(dic))
			self.request_sequence[request_id]=operation
			output('operation', operation)
			self.sendOperationToReplicaNode('PERFORM_OPERATION',request_id,operation,self.replicas[0])
			# await(some(received('PERFORM_OPERATION',)))












