import uuid


class Client(process):
	
	dictionary_data;

	history;

	order_cache;


	def setup(reqList,olympus,replicas):
		output("**********Setting up Client *************"); 
		self.reqList=reqList
		self.olympus=olympus
		self.replicas=replicas
		self.slot_number = 0

 
	def main(): pass

	def run():
		output("*********RUN : Starting Client***********")
		send(('SET_UP',), to=self.olympus)
		received(('SET_UP',), from_=self.olympus)
		output("*********received SET_UP FROM Client***********")
		# flag = 'FORWARD'
		# send(('PERFORM_OPERATION',request_id, self.reqList[0]), to=self.replicas[0])
		# # send(('PERFORM_OPERATION',), to=self.replicas[0])
		# await(received(('SHUTTLE',), from_=self.replicas[len(replicas)-1]))
		# output("*********SHUTTLE Reached***********")
		output("starting operations shuttle")
		self.executeOperations()
		await(received('',))

	def receive(msg=('SHUTTLE',result_proof,), from_=self.replicas[len(replicas)-1]): 
		output("*********SHUTTLE Reached***********")
		output(result_proof)


	def dictionary():
		dictionary = [('movie','star'),('jedi','luke skywalker'),('actor','irfan'),('criket','sachin'),('chupa','aditya')]
		return dictionary

	def executeOperations():
		output(self.reqList)
		for operation in self.reqList:
			request_id = uuid.uuid4()
			output('operation', operation)
			send(('PERFORM_OPERATION',request_id, operation), to=self.replicas[0])	

