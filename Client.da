import config
import uuid
import logging as logger
import sys
import time

class Client(process):
	
	dictionary_data;

	history;

	order_cache;

	request_sequence

	def setup(reqList,olympus,replicas, currentClient,allReplicaVerifyKeysMap):
		config.main()
		logger.basicConfig(
		format="%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s",
		handlers=[
		logger.FileHandler("{0}/{1}.log".format(config.readProperty("logfile_path"), config.readProperty("logfile_name"))),
		logger.StreamHandler()
		],
		level=logger.DEBUG)
		logger.info("**********Setting up Client *************"); 
		self.reqList=reqList
		self.olympus=olympus
		self.replicas=replicas
		self.currentClient=currentClient
		self.request_sequence={}

		# logger.info("logging for the first time ")
		# logger.info("************Setting Up Client***********",config.readProperty("logfile_path"))

 
	def main(): pass

	def run():
		logger.debug("*********RUN : Starting Client***********")
		send(('SET_UP',), to=self.olympus)
		received(('SET_UP',), from_=self.olympus)
		logger.debug('Recieved Setup')
		logger.debug("*********received SET_UP FROM Client***********")
		
		# self.executeOperations()
		# # output("\n****************************\n****************************\n****************************")
		# # resultproof
		# await(received('SHUTTLE',))
		# time.sleep(10)
		# self.executeRetransmissionTest();
		# await(received('SHUTTLE',))
		# output("\n****************************\n****************************\n****************************")
		
		self.executeOperations()
		# await(received('',)) 
		output("************************************************************************************")
		output("************************************************************************************")
		output("************************************************************************************")
		# resultproof
		# await(received('SHUTTLE',))
		if("client_1" in currentClient):
			time.sleep(10)
			self.executeRetransmissionTest();
			output("\n****************************\n****************************\n****************************")
			# await(received('',))
		

	# def receive(msg=('RESULT_FROM_TAIL',result_proof,), from_=self.replicas[len(self.replicas)-1]): 
	# 	logger.info("******** Result proof:" + str(result_proof) +" received from :"+str(self.replicas[len(self.replicas)-1]))
	# 	logger.debug("*********SHUTTLE Reached***********")
	# 	validation, result = config.validateResultProof(result_proof, allReplicaVerifyKeysMap)
	# 	if(validation):
	# 		logger.info("******** Result proof validated: Checking consistency of result")
	# 	else:
	# 		logger.error("************************Validating order proof failed at Client********************")
	# 	# output(result_proof)


	def dictionary():
		dictionary = [('movie','star'),('jedi','luke skywalker'),('actor','irfan'),('criket','sachin'),('chupa','aditya')]
		return dictionary

	def sendOperationToReplicaNode(msg,requestId,operation,replicaId):
		send((msg,requestId, operation,self.currentClient,), to=replicaId)	
		output("sendOperationToReplicaNode send at replicaId ",replicaId)

	def executeRetransmissionTest():
		# for operation in self.reqList:
		# 	request_id = uuid.uuid4()
		# 	self.request_sequence[request_id]=operation
		logger.info("in executeRetransmissionTest at client : "+str(self.currentClient))
		for requestId,operation in self.request_sequence.items():
			output("executeRetransmissionTest requestId : ",requestId, ', operation', operation)
			self.retransmission(requestId,operation)
			break;


	#Receive output for retransmission request from replica.
	def receive(msg=("RETRANSMISSION",result_proof,replicaId,),):
		logger.info("RETRANSMISSION Result received from replica : "+str(replicaId)+", result_proof : "+str(result_proof));
		validation, result = config.validateResultProof(result_proof, allReplicaVerifyKeysMap)
		logger.info("validation %s, result %s",%(validation, result))
		if(validation):
			logger.info("Result proof correctly validated! SUCCESS !!")
		else:
			logger.error("Result proof incorrect! FAILED !!")

	def retransmission(request_id,operation):
		awaitResultQueue=set()
		resultproof=str()
		for rnum,rep in enumerate(replicas):
			sendOperationToReplicaNode('RETRANSMISSION',request_id,operation,rep)
			awaitResultQueue.add(('FORWARD_SHUTTLE', resultproof ,))
			
        
		time.sleep(1)
		logger.debug("BEFORE: IN CLIENT FINISHED!!")
		await(each(p in awaitResultQueue, has=received(('RETRANSMISSION', resultproof))))
		logger.debug("AFTER: IN CLIENT FINISHED!!")



	def executeOperations():
		logger.info("The Client:%s.    workload to be performed : %s" %(currentClient, self.reqList))
		result_proof=[]
		for operation in self.reqList:
			request_id = uuid.uuid4()
			self.request_sequence[request_id]=operation
			self.sendOperationToReplicaNode('PERFORM_OPERATION',request_id,operation,self.replicas[0])
			logger.info("send operation to client "+str(self.currentClient))
			if await(some(received(('RESULT_FROM_TAIL',result_proof,)))):
				logger.debug("Result SHUTTLE reached from tail Replica : ")
				validation, result = config.validateResultProof(result_proof, allReplicaVerifyKeysMap)
				if(validation):
					logger.info("Result proof correctly validated! SUCCESS !!")
				else:
					logger.error("Result proof incorrect! FAILED !!")
		logger.info("executeOperations finished")











